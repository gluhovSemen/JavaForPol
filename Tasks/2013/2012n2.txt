Важно:  
                В среде IDE ( например, Eclipse)  есть возможность ввести параметры из командной строки.
                Обработка ошибок должна быть сделана для всех заданий, если есть ввод параметров. 
                Введенные параметры и результаты работы должны выводиться на дисплей (вместе с соответствующими пояснениями, если это необходимо для понимания решенной задачи ).
                Поток выполнения  имеет имя по умолчанию, которое нужно получить во время выполнения с помощью метода Thread.currentThread.getName().
                3 и 4 задания для потоков выполнения предполагают выполнение потоков четко по очереди.

1. Создать приложение с 2 параметрами, которое вычислит количество лет ,за которые сумма денег,положенная в банк, должна удвоится. В качестве параметров задаются  любые  неотрицательные  числа. 
1-ое число - количество денег, 2-ое число-годовой  процент. Учесть, что проценты начисляются раз в месяц и капитализируются.
Сосчитать и вывести на дисплей результат подсчета.

2. Создать приложение с 3 классами- А, B , С  и 2 интерфейсами I1, I2. 
Класс А является родительским для классов B и С, Интерфейс I1 является родительским для интерфейса I2.
Класс В реализует интерфейс I2.  Класс С реализует интерфейс I1. 
Интерфейс I1 содержит метод i1, класс A содержит метод  i1 с параметром, класс А также содержит метод а1, интерфейс I2 содержит метод i2. Класс B содержит метод b1.
Класс С содержит метод с1.
Все методы выводят строку с именем своего класса или интерфейса и именем метода.
 Создать минимальное число объектов для выполнения всех указанных 6 методов. 
и выполнить все эти методы.

3. Создать 2 потока, один из которых генерирует случайным образом число Фибоначчи  в разделенную между потоками переменную , 
а другой считывает это число , определяет четное ли оно , и выводит на печать каждое четное число.
 Цикл для каждого потока выполняется  число раз заданное параметром.  Обработать исключительную ситуацию с переполнением( начать все с начала).
Нужно выводить записываемое число   для первого потока и каждое найденное четное число для второго потока или 0, если число нечетное. Выполнить задание   с использованием конструкции synchronized . 
Не использовать в этом задании флаги для синхронизации потоков, а только методы wait и notify. 
Также не использовать любые задержки для потоков после начала их работы в виде методов sleep, yield или wait c параметром.
(
Числа Фибоначчи — элементы числовой последовательности
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765,  … 
в которой каждое последующее число равно сумме двух предыдущих чисел. )

4.  Количество потоков задано параметром. Потоки генерируют случайным образом :  нечетный поток -согласную букву, четный поток -гласную. 
Последний по номеру поток добавляет к букве пробел (или точку, если это последнее слово). 
Потоки  , генерируя буквы, по очереди выводят их на консоль (вместе с уже сгенеренными буквами и словами). Слово состоит из количества букв равного заданному количеству потоков.
Работа потоков заканчивается после того, как число, заданное 2-ым параметром, будет равно числу выведенных слов.  
Использовать ограничения из задания 3. 
Выводить на дисплей результаты работы каждого потока.

5. Создать  приложение с пользовательским интерфейсом для заданий 1-4. Для этого приложения должна быть реализована возможность выбора из списка любого приложения и его выполнение. 
Модифицировать задания 1-4 так, чтобы весь вывод происходил либо в диалоговых окнах  , либо в текстовых областях. 
Т. е это должно быть не приложение командной строки , а полностью  графическое приложение

6.  Создать приложение для мобильного телефона , которое демонстрирует 3 вида списков List: IMPLICIT, EXCLUSIVE и MULTIPLE .  
Выбор элементов из списков должен отображаться ,  например , с помощью алертов.

7. Создать бизнес-приложение или приложение-игру для мобильного телефона . Подготовить отчет этого курсового проекта в электронном виде. В отчете необходимо 
наличие титульного листа, диаграмм классов, описания предназначения классов и методов, скриншотов и кода приложения в конце. 