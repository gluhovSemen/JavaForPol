/**  *@author Елизавета
 *4.  Выполнить приложение командной строки с двумя параметрами , один из которых – количество потоков, 
другой параметр – количество выводимых строк.
Нужно так синхронизовать потоки, чтобы имена потоков выводились поочередно- в каждой строке.
Под синхронизацией подразумевается использование конструкции synchronized и методов wait, notify.
Использовать ограничения из задания 3. 
Имя первого потока должно всегда выводится в новой строке. * 
 * */
 
package lab4;


import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *@author Елизавета
 * 
 */
public class lab4 {
        
    public static class CWriter extends Thread {
	//класс, каждый поток которого генерирует буквы (между получившимися словами пробел)
	static int m_NUMBER_OF_THREADS; //заданное количество потоков, а также количество букв в слове
	static int m_NUMBER_OF_LINES;
	
	static List<CWriter> m_Writers=new LinkedList<CWriter>();
	static List<Object> m_Synchro=new LinkedList<Object>();
	static Object mStartSynchro=new Object();

	
	static Integer m_count;
	static Integer m_lines;
	static Integer k;
	
	int m_WriterNumber; //номер потока
	
	
	CWriter(int WriterNumber) {
	   //закрытый конструктор
	   m_WriterNumber=WriterNumber;
	}
	
	public static void Start(int NumberOfThreads,int NumberOfLines) {
	   //запускает потоки, которые будут генерировать буквы
	   m_NUMBER_OF_THREADS=NumberOfThreads;
	   m_NUMBER_OF_LINES=NumberOfLines;
	   m_count=0; //обнуляем счетчики
	   m_lines=0;
	   k=NumberOfThreads;
	   
	 
	   //инициализируем вектор потоков и запускаем их
	   for(int i=0; i<m_NUMBER_OF_THREADS; i++) {
	       m_Writers.add(new CWriter(i));
	       m_Synchro.add(new Object());
	   }
	   for(int i=0; i<m_NUMBER_OF_THREADS; i++)
	       m_Writers.get(i).start();
	}
	
	
	
	private static void Stop() {
	    //завершает все процессы
	    class Stopper extends Thread {
		@Override
		public synchronized void run() {
		    for(int i=0; i<m_Writers.size(); i++)
			m_Writers.get(i).stop();
		}
	    }
	    Stopper stopper=new Stopper();
	    stopper.start();
	}
	
	
	
	@Override
	public void run() {
	    if (m_WriterNumber!=0)
		synchronized (m_Synchro.get(m_WriterNumber)) {
		    try {
			m_Synchro.get(m_WriterNumber).wait();
		    } catch (InterruptedException ex) {
			Logger.getLogger(lab4.class.getName()).log(Level.SEVERE, null, ex);
		    }
		}
	
	    
	    //-----------------------
	    while(true) {
		synchronized (m_Synchro.get(m_WriterNumber)) {
			
			m_count++;
		     		  
		    if (m_count==m_NUMBER_OF_THREADS) {
		    	m_count=0;
		    	m_lines++;
			
			if (m_lines==m_NUMBER_OF_LINES) {
				System.out.printf("Thread: %s ",m_WriterNumber);
			   	Stop(); //создаем поток, который завершит все остальные потоки
								try {
										m_Synchro.get(m_WriterNumber).wait(); //никого не впускаем в секцию
								} catch (InterruptedException ex) {
									Logger.getLogger(lab4.class.getName()).log(Level.SEVERE, null, ex);
								}
								}
				    }
		    
		    
		   //печать потоков
		    System.out.printf("Thread: %s ",m_WriterNumber);
		   
		    
		    if (m_WriterNumber>=m_Writers.size()-1) {
			synchronized(m_Synchro.get(0)) {
			    m_Synchro.get(0).notify();
			}
		    } else { 
			synchronized(m_Synchro.get(m_WriterNumber+1)) {
			    m_Synchro.get(m_WriterNumber+1).notify();
			}
		    }
			   
		    if (m_count %  k == 0) {
		    System.out.println("  ");
		    }
		    	
		    try {
			m_Synchro.get(m_WriterNumber).wait();
		    } catch (InterruptedException ex) {
			Logger.getLogger(lab4.class.getName()).log(Level.SEVERE, null, ex);
		    }
			
		}	
	    }
	    //-------------
	}
	
	public static void Join() throws InterruptedException {
	    //ожидание завершения всех потоков
	    for(int i=0; i<m_Writers.size(); i++)
		m_Writers.get(i).join();
	}
    }
    
    
    public static void main(String[] args) {
	
	if (args.length!=2) {
	    System.out.println("number of param must be 2");
	    System.exit(1);
	}
		
	int NumberOfThreads=0;
	int NumberOfLines=0;
	
	try {
	    NumberOfThreads=Integer.parseInt(args[0]);
	    NumberOfLines=Integer.parseInt(args[1]); 
	} catch (Exception e) {
	    System.out.println("your params may not be an integer. Exception: " + e.getMessage());
	    System.exit(1);
	}
	
	if ((NumberOfThreads<=0) || (NumberOfLines<=0)) {
	    System.out.printf("your params may not poisitive: NumberOfThreads %d, NumberOfLines %d\n",NumberOfThreads,NumberOfLines);
	    System.exit(1);
	}
	
	CWriter.Start(NumberOfThreads,NumberOfLines);

	try {
	    CWriter.Join();
	} catch (InterruptedException ex) {
	    Logger.getLogger(lab4.class.getName()).log(Level.SEVERE, null, ex);
	} 
	
    }
}

